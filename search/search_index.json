{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Shayna's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"admonitions_example/","title":"Admonitions example","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"code_block_example/","title":"Code block example","text":"<pre><code>import tensorflow as tf\n</code></pre>"},{"location":"tutorials/rust-setup/","title":"Setting up a Dev Container for Rust","text":"<ul> <li> <p>Primary author: Shayna Patel</p> </li> <li> <p>Reviewer: Bhavika Lingutla</p> </li> </ul> <p>This tutorial will guide you through setting up a Rust development environment using Dev Containers. By the end of the tutorial, you will have a working Rust project that prints '\"Hello COMP423\"' to standard output.</p> <p>Info</p> <p>Some snippets of this tutorial were taken from or inspired by Kris Jordan's COMP 423 MkDocs Tutorial.</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed and set up:</p> <ol> <li>A GitHub account: If you don't have one yet, sign up at GitHub.</li> <li>Git Installed: Install Git from here.</li> <li>Docker installed: Required to run the Dev Container. Get Docker.</li> <li>Visual Studio Code (VS Code): Download and install it from here.</li> <li>Command-line basics: You can review this resource.</li> </ol>"},{"location":"tutorials/rust-setup/#step-1-create-a-new-dev-container-project","title":"Step 1: Create a New Dev Container Project","text":"<p>(A) Open your terminal and create a directory for your project: <pre><code>mkdir comp423-rust-dev\ncd comp423-rust-dev\n</code></pre></p> <p>(B) Initialize a new Git repository: <pre><code>git init\n</code></pre></p> <p>(C) Create a README.md file: <pre><code>echo \"# Rust Dev Container Project\" &gt; README.md\necho \"To view the entire tutorial, visit https://shaynapat3l.github.io/comp423-course-notes/\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p> <p>Tip</p> <p>Initializing Git and adding a README ensures your project is ready for version control and collaboration.</p>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a Remote Repository on GitHub","text":"<p>(A) Log in to your GitHub account and navigate to the Create a New Repository page.</p> <p>(B) Fill in the details as follows:</p> <ul> <li>Repository Name: <code>comp423-rust-dev</code></li> <li>Description: \"A Rust project using Dev Containers\"</li> <li>Visibility: Public</li> <li>Do not initialize the repository with a README, <code>.gitignore</code>, or license.</li> <li>Click Create Repository.</li> </ul>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-on-github","title":"Step 3: Link Your Local Repository on GitHub","text":"<p>(A) Add the GitHub repository as a remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/comp423-rust-dev.git\n</code></pre></p> <p>Warning</p> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>(B) Check your default branch name with the following command (it should be <code>main</code>): <pre><code>git branch\n</code></pre></p> <p>Note</p> <p>If the default branch is not <code>main</code>, rename it using <code>git branch -M main</code>.</p> <p>(C) Push your local commits to the GitHub repository: <pre><code>git push --set-upstream origin main\n</code></pre></p> <p>(D) Refresh your GitHub repository in your web browser to confirm that your local commits have been pushed to the remote repository.</p>"},{"location":"tutorials/rust-setup/#step-4-configure-the-dev-container","title":"Step 4: Configure the Dev Container","text":"<p>(A) Open the <code>comp423-rust-dev</code> directory in Visual Studio Code by going to: File &gt; Open Folder.</p> <p>Note</p> <p>Make sure to install the Dev Containers extension for VS Code.</p> <p>(B) Create a <code>.devcontainer</code> directory in the project root: <pre><code>mkdir .devcontainer\n</code></pre></p> <p>(C) Inside <code>.devcontainer</code>, create a <code>devcontainer.json</code> file.</p> <ul> <li>The <code>.devcontainer.json</code> file defines the configuration for your development environment. It specifies:<ul> <li><code>name</code>: A descriptive name for your dev container.</li> <li><code>image</code>: The Docker image to use, in this case, the latest version of a Rust environment.</li> <li><code>customizations</code>: Adds useful configurations to VS Code.</li> </ul> </li> </ul> <p>(D) Add the following content to <code>devcontainer.json</code>: <pre><code>{\n    \"name\": \"Rust Dev Environment\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre></p> <p>Note</p> <p>This configuration uses Microsoft's offical Rust image and installs the <code>rust-analyzer</code> extension automatically.</p> <p>(E) Reopen the folder in a Dev Container.</p> <ul> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on macOS) and select Remote-Containers: Reopen in Container.</li> </ul> <p>Warning</p> <p>If the container fails to build, verify your Docker installation and ensure the <code>devcontainer.json</code> file is correctly configured.</p>"},{"location":"tutorials/rust-setup/#step-5-verify-rust-installation","title":"Step 5: Verify Rust Installation","text":"<p>(A) Inside the Dev Container, check the Rust version by typing the following in your terminal: <pre><code>rustc --version\n</code></pre></p> <p>Warning</p> <p>If the version is outdated, run <code>rustup update</code> to ensure you have the latest version of Rust. As of January 2025, the latest version of Rust is 1.84.0, released on January 9, 2025.</p>"},{"location":"tutorials/rust-setup/#step-6-create-a-rust-project","title":"Step 6: Create a Rust Project","text":"<p>(A) Use the <code>cargo new</code> command to create a new binary project: <pre><code>cargo new hello-comp423 --vcs none\ncd hello-comp423\n</code></pre></p> <p>Note</p> <p>The <code>--vcs none</code> flag ensures that Cargo does not create a Git repository automatically.</p>"},{"location":"tutorials/rust-setup/#step-7-write-the-program","title":"Step 7: Write the program","text":"<p>(A) Open the <code>src/main.rs</code> file and modify it to print \"Hello COMP423\": <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-8-compile-and-run-the-program","title":"Step 8: Compile and Run the Program","text":"<p>(A) Use <code>cargo build</code>:</p> <ol> <li>In your terminal, compile the project:     <pre><code>cargo build\n</code></pre></li> <li>Run the compiled binary manually:     <pre><code>./target/debug/hello-comp423\n</code></pre><ul> <li>Example Output: <pre><code>Hello COMP423\n</code></pre></li> </ul> </li> </ol> <p>Tip</p> <p><code>cargo build</code> is similar to gcc in COMP211. It compiles your source code into an executable file.</p> <p>(B) Alternatively, you can use <code>cargo run</code>:</p> <ol> <li>Use the <code>cargo run</code> command to compile and execute the program in one step:     <pre><code>cargo run\n</code></pre></li> </ol> <p>Note</p> <p>While <code>cargo build</code> compiles the project and generates an excutable file whicn then must be manually run, <code>cargo run</code> combines the build and execution steps into a single command.</p>"},{"location":"tutorials/rust-setup/#step-9-push-changes-and-deploy","title":"Step 9: Push Changes and Deploy","text":"<p>(A) Add and commit your changes:     <pre><code>git add .\ngit commit -m \"Rust tutorial with Dev Container\"\n</code></pre></p> <p>(B) Push your changes to Github:     <pre><code>git push origin main\n</code></pre></p>"}]}